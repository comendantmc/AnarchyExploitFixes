package me.moomoo.anarchyexploitfixes.patches;

import lombok.RequiredArgsConstructor;
import me.moomoo.anarchyexploitfixes.Main;
import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.block.Banner;
import org.bukkit.block.Block;
import org.bukkit.block.Container;
import org.bukkit.block.Skull;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;

@RequiredArgsConstructor
public class ChunkBan implements Listener {
    private final Main plugin;

    @EventHandler
    private void onBlockPlace(BlockPlaceEvent evt) {
        FileConfiguration config = plugin.getConfig();

        if (config.getBoolean("PreventChunkBan")) {
            Chunk chunk = evt.getBlock().getChunk();
            Block block = evt.getBlock();
            ConfigurationSection cs = config.getConfigurationSection("CustomMaxPerChunk");

            for (String b : cs.getKeys(false)) {
                if (Material.getMaterial(b).equals(block.getType())) {
                    if (plugin.checkChunk(Material.getMaterial(b), chunk) > cs.getInt(b)) {
                        evt.setCancelled(true);
                        return;
                    }
                }
            }
            if (!evt.isCancelled()) {
                switch (block.getType()) {
                    case ENCHANTMENT_TABLE: {
                        if (plugin.checkChunk(Material.ENCHANTMENT_TABLE, chunk) > config.getInt("MaxEnchantmentTablePerChunk")) {
                            evt.setCancelled(true);
                        }
                        break;
                    }
                    case ENDER_CHEST: {
                        if (plugin.checkChunk(Material.ENDER_CHEST, chunk) > config.getInt("MaxEnderchestPerChunk")) {
                            evt.setCancelled(true);
                        }
                        break;
                    }
                    case HOPPER: {
                        if (plugin.checkChunk(block.getType(), chunk) > config.getInt("MaxHopperPerChunk")) {
                            evt.setCancelled(true);
                        }
                        break;
                    }
                    case WALL_SIGN:
                    case SIGN_POST: {
                        if (plugin.checkChunk(block.getType(), chunk) > config.getInt("MaxSignPerChunk")) {
                            evt.setCancelled(true);
                        }
                        break;
                    }
                    case SLIME_BLOCK: {
                        if (plugin.checkChunk(block.getType(), chunk) > config.getInt("MaxSlimePerChunk")) {
                            evt.setCancelled(true);
                        }
                        break;
                    }
                    case BEACON: {
                        if (plugin.checkChunk(block.getType(), chunk) > config.getInt("MaxBeaconPerChunk")) {
                            evt.setCancelled(true);
                        }
                        break;
                    }
                    case PISTON_BASE:
                    case PISTON_STICKY_BASE: {
                        if (plugin.checkChunk(block.getType(), chunk) > config.getInt("MaxPistonPerChunk")) {
                            evt.setCancelled(true);
                        }
                        break;
                    }
                    case GLOWSTONE: {
                        if ((block.getType().equals(Material.GLOWSTONE)) && plugin.checkChunk(block.getType(), chunk) > config.getInt("MaxGlowstonePerChunk")) {
                            evt.setCancelled(true);
                        }
                        break;
                    }
                    case STANDING_BANNER:
                    case BANNER:
                    case WALL_BANNER: {
                        if ((block.getState() instanceof Banner) && plugin.checkChunk(block.getType(), chunk) > config.getInt("MaxBannersPerChunk")) {
                            evt.setCancelled(true);
                        }
                        break;
                    }
                    case SKULL: {
                        if ((block.getState() instanceof Skull) && plugin.checkChunk(block.getType(), chunk) > config.getInt("MaxSkullsPerChunk")) {
                            evt.setCancelled(true);
                        }
                        break;
                    }
                    default: {
                        if (block.getState() instanceof Container) {
                            if (plugin.checkChunk(block.getType(), chunk) > config.getInt("MaxContainerPerChunk")) {
                                evt.setCancelled(true);
                            }
                        }
                        break;
                    }
                }
            }

        }
    }
}
